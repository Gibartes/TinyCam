worker_processes auto;
events { worker_connections 4096; }

http {
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 75s;
  keepalive_requests 1000;
  types_hash_max_size 4096;

  upstream tinycam_backend {
    server 127.0.0.1:8080;
    keepalive 32;
  }

  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  gzip off;

  # --- HTTP â†’ HTTPS redirect ---
  server {
    listen 80;
    listen [::]:80;
    server_name example.com;
    return 301 https://$host$request_uri;
  }

  # --- HTTPS / HTTP2 + WebSocket proxy ---
  server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name example.com;

    # TLS (use certbot/letsencrypt or your certs)
    ssl_certificate     /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    # (Optional) OCSP stapling if you have a full chain
    ssl_stapling on;
    ssl_stapling_verify on;

    # ---------- REST endpoints (start/stop/apply/devices, etc.) ----------
    location / {
      proxy_pass http://tinycam_backend;
      proxy_http_version 1.1;

      # pass client info
      proxy_set_header Host              $host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto https;

      # low latency for control calls (keep defaults)
      proxy_connect_timeout 5s;
      proxy_send_timeout    30s;
      proxy_read_timeout    30s;

    }

    # ---------- WebSocket streaming (/stream) ----------
    location /stream {
      proxy_pass http://tinycam_backend/stream;
      proxy_http_version 1.1;

      # WebSocket upgrade
      proxy_set_header Upgrade    $http_upgrade;
      proxy_set_header Connection $connection_upgrade;

      # Pass through
      proxy_set_header Host              $host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto https;

      # Low-latency tuning
      proxy_buffering        off;   # IMPORTANT for live
      proxy_request_buffering off;
      proxy_read_timeout     3600s; # long-lived WS
      proxy_send_timeout     3600s;
      send_timeout           3600s;

      # If you expect very large frames and want to raise limits:
      # proxy_busy_buffers_size 512k;
      # client_max_body_size    0;
    }

    # (Optional) CORS for browsers hosted on a different origin
    # add_header Access-Control-Allow-Origin "*" always;
    # add_header Access-Control-Allow-Headers "Content-Type, X-TinyCam-Auth" always;
    # add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
    # if ($request_method = OPTIONS) { return 204; }
  }
}
